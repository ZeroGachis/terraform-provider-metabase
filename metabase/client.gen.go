// Package metabase provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package metabase

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	SessionScopes = "Session.Scopes"
)

// Defines values for CollectionPermissionLevel.
const (
	CollectionPermissionLevelNone  CollectionPermissionLevel = "none"
	CollectionPermissionLevelRead  CollectionPermissionLevel = "read"
	CollectionPermissionLevelWrite CollectionPermissionLevel = "write"
)

// Defines values for DatabaseDetailsBigQueryDatasetFiltersType.
const (
	DatabaseDetailsBigQueryDatasetFiltersTypeAll       DatabaseDetailsBigQueryDatasetFiltersType = "all"
	DatabaseDetailsBigQueryDatasetFiltersTypeExclusion DatabaseDetailsBigQueryDatasetFiltersType = "exclusion"
	DatabaseDetailsBigQueryDatasetFiltersTypeInclusion DatabaseDetailsBigQueryDatasetFiltersType = "inclusion"
)

// Defines values for DatabaseEngine.
const (
	BigqueryCloudSdk DatabaseEngine = "bigquery-cloud-sdk"
)

// Defines values for PermissionsGraphDatabaseAccessNative.
const (
	PermissionsGraphDatabaseAccessNativeFull  PermissionsGraphDatabaseAccessNative = "full"
	PermissionsGraphDatabaseAccessNativeNone  PermissionsGraphDatabaseAccessNative = "none"
	PermissionsGraphDatabaseAccessNativeWrite PermissionsGraphDatabaseAccessNative = "write"
)

// Defines values for PermissionsGraphDatabaseAccessSchemas.
const (
	PermissionsGraphDatabaseAccessSchemasAll  PermissionsGraphDatabaseAccessSchemas = "all"
	PermissionsGraphDatabaseAccessSchemasFull PermissionsGraphDatabaseAccessSchemas = "full"
	PermissionsGraphDatabaseAccessSchemasNone PermissionsGraphDatabaseAccessSchemas = "none"
)

// Defines values for PermissionsGraphDatabasePermissionsDetails.
const (
	No  PermissionsGraphDatabasePermissionsDetails = "no"
	Yes PermissionsGraphDatabasePermissionsDetails = "yes"
)

// Defines values for ListDatabasesParamsInclude.
const (
	Tables ListDatabasesParamsInclude = "tables"
)

// Card A card (or question).
type Card struct {
	// Archived Whether the card has been archived.
	Archived bool `json:"archived"`

	// Id The ID of the card.
	Id int `json:"id"`

	// Name The name of the card.
	Name                 string                 `json:"name"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Collection A collection that regroups dashboards and cards.
type Collection struct {
	// Archived Whether the collection is archived.
	// When archived, a collection no longer appears in the list publicly.
	Archived *bool `json:"archived,omitempty"`

	// Color A color for the collection.
	Color *string `json:"color,omitempty"`

	// Description A description for the collection.
	Description *string `json:"description"`

	// EntityId A unique string identifier for the collection.
	EntityId *string `json:"entity_id,omitempty"`

	// Id The unique ID for the collection.
	// Created collections will have an integer ID. The automatically-created root collection's ID is `root`.
	Id Collection_Id `json:"id"`

	// Location A path-like location, useful when this is a sub-collection.
	Location *string `json:"location,omitempty"`

	// Name The name of the collection.
	Name string `json:"name"`

	// ParentId The ID of the parent collection, if any.
	ParentId *int `json:"parent_id"`

	// PersonalOwnerId The ID of the user owning this collection, if it is a personal collection.
	PersonalOwnerId *int `json:"personal_owner_id"`

	// Slug The slug for the collection, used in URLs.
	Slug *string `json:"slug,omitempty"`
}

// CollectionId0 defines model for .
type CollectionId0 = string

// CollectionId1 defines model for .
type CollectionId1 = int

// Collection_Id The unique ID for the collection.
// Created collections will have an integer ID. The automatically-created root collection's ID is `root`.
type Collection_Id struct {
	union json.RawMessage
}

// CollectionPermissionLevel The level of permission allowed when accessing the collection.
type CollectionPermissionLevel string

// CollectionPermissionsGraph The entire permission graph for collections.
type CollectionPermissionsGraph struct {
	// Groups A map where keys are group IDs and values are permissions for this group.
	Groups map[string]CollectionPermissionsGraphCollectionPermissionsMap `json:"groups"`

	// Revision The revision of the permissions graph.
	Revision int `json:"revision"`
}

// CollectionPermissionsGraphCollectionPermissionsMap A map where keys are collection IDs and values are permission levels.
type CollectionPermissionsGraphCollectionPermissionsMap map[string]CollectionPermissionLevel

// CreateCardBody The payload when creating a new card.
type CreateCardBody map[string]interface{}

// CreateCollectionBody The payload used to create a new collection.
type CreateCollectionBody struct {
	// Color A color for the collection.
	Color string `json:"color"`

	// Description A description for the collection.
	Description *string `json:"description"`

	// Name The name of the collection.
	Name string `json:"name"`

	// ParentId The ID of the parent collection, if any.
	ParentId *int `json:"parent_id"`
}

// CreateDashboardBody The body of the payload when creating a dashboard.
type CreateDashboardBody struct {
	// CacheTtl The cache TTL.
	CacheTtl *int `json:"cache_ttl"`

	// CollectionId The ID of the collection in which the dashboard is placed.
	CollectionId *int `json:"collection_id"`

	// CollectionPosition The position of the dashboard in the collection.
	CollectionPosition *int `json:"collection_position"`

	// Description A description for the dashboard.
	Description *string `json:"description"`

	// Name The name of the dashboard.
	Name string `json:"name"`

	// Parameters A list of parameters for the dashboard, that the user can tweak.
	Parameters *[]DashboardParameter `json:"parameters"`
}

// CreateDashboardCardBody The payload when creating a new card within a dashboard.
type CreateDashboardCardBody struct {
	// CardId The ID of the card to add to the dashboard.
	CardId *int `json:"cardId"`

	// ParameterMappings A list of parameter mappings for the card.
	ParameterMappings *[]interface{} `json:"parameter_mappings,omitempty"`
}

// CreateDatabaseBody The payload used to create a new database.
type CreateDatabaseBody struct {
	// Details Engine-specific details used to configure the connection to the database.
	Details DatabaseDetails `json:"details"`

	// Engine The type of database to connect to.
	Engine DatabaseEngine `json:"engine"`

	// Name The user-displayable name for the database.
	Name string `json:"name"`
}

// CreatePermissionsGroupBody The payload used to create a new permissions group.
type CreatePermissionsGroupBody struct {
	// Name A user-displayable name for the group.
	Name string `json:"name"`
}

// CreateSessionBody The credentials required to create a session.
type CreateSessionBody struct {
	// Password The password for the account.
	Password string `json:"password"`

	// Username The name of the user, or his email.
	Username string `json:"username"`
}

// Dashboard A dashboard containing cards.
type Dashboard struct {
	// Archived Whether the dashboard has been archived.
	Archived bool `json:"archived"`

	// CacheTtl The cache TTL.
	CacheTtl *int `json:"cache_ttl"`

	// CollectionId The ID of the collection in which the dashboard is placed.
	CollectionId *int `json:"collection_id"`

	// CollectionPosition The position of the dashboard in the collection.
	CollectionPosition *int `json:"collection_position"`

	// Description A description for the dashboard.
	Description *string `json:"description"`

	// Id The ID of the dashboard.
	Id int `json:"id"`

	// Name The name of the dashboard.
	Name string `json:"name"`

	// Parameters A list of parameters for the dashboard, that the user can tweak.
	Parameters []DashboardParameter `json:"parameters"`
}

// DashboardCard A card within a dashboard.
type DashboardCard struct {
	// CardId The ID of the card.
	CardId *int `json:"card_id"`

	// Col The index of the column at which the card is placed.
	Col int `json:"col"`

	// Id The ID of the dashboard card.
	Id int `json:"id"`

	// ParameterMappings A list of parameter mappings.
	ParameterMappings []interface{} `json:"parameter_mappings"`

	// Row The index of the row at which the card is placed.
	Row int `json:"row"`

	// Series A list of series.
	Series []interface{} `json:"series"`

	// SizeX The horizontal size of the card in the dashboard.
	SizeX int `json:"sizeX"`

	// SizeY The vertical size of the card in the dashboard.
	SizeY int `json:"sizeY"`

	// VisualizationSettings The visualization settings for the card.
	VisualizationSettings map[string]interface{} `json:"visualization_settings"`
}

// DashboardParameter A parameter for a dashboard, that the user can tweak.
type DashboardParameter struct {
	// Default The default value for the parameter.
	Default *DashboardParameter_Default `json:"default,omitempty"`

	// Id The ID of the parameter.
	Id string `json:"id"`

	// Name The displayed name for the parameter.
	Name string `json:"name"`

	// SectionId The ID of the section.
	SectionId string `json:"sectionId"`

	// Slug The slug name for the parameter.
	Slug string `json:"slug"`

	// Type The type of parameter.
	Type string `json:"type"`
}

// DashboardParameterDefault0 defines model for .
type DashboardParameterDefault0 = string

// DashboardParameterDefault1 defines model for .
type DashboardParameterDefault1 = []interface{}

// DashboardParameter_Default The default value for the parameter.
type DashboardParameter_Default struct {
	union json.RawMessage
}

// DashboardWithCards defines model for DashboardWithCards.
type DashboardWithCards struct {
	// Archived Whether the dashboard has been archived.
	Archived bool `json:"archived"`

	// CacheTtl The cache TTL.
	CacheTtl *int `json:"cache_ttl"`

	// CollectionId The ID of the collection in which the dashboard is placed.
	CollectionId *int `json:"collection_id"`

	// CollectionPosition The position of the dashboard in the collection.
	CollectionPosition *int `json:"collection_position"`

	// Description A description for the dashboard.
	Description *string `json:"description"`

	// Id The ID of the dashboard.
	Id int `json:"id"`

	// Name The name of the dashboard.
	Name string `json:"name"`

	// OrderedCards The list of cards in the dashboard.
	OrderedCards []DashboardCard `json:"ordered_cards"`

	// Parameters A list of parameters for the dashboard, that the user can tweak.
	Parameters []DashboardParameter `json:"parameters"`
}

// Database An external database that can be queried by cards and dashboards.
type Database struct {
	// Details Engine-specific details used to configure the connection to the database.
	Details DatabaseDetails `json:"details"`

	// Engine The type of database to connect to.
	Engine DatabaseEngine `json:"engine"`

	// Id The ID for the database.
	Id int `json:"id"`

	// Name The user-displayable name for the database.
	Name string `json:"name"`
}

// DatabaseDetails Engine-specific details used to configure the connection to the database.
type DatabaseDetails struct {
	union json.RawMessage
}

// DatabaseDetailsBigQuery The content of the `details` map for a database when connecting to BigQuery.
type DatabaseDetailsBigQuery struct {
	// DatasetFiltersPatterns The pattern used by the `dataset-filters-type`.
	DatasetFiltersPatterns *string `json:"dataset-filters-patterns,omitempty"`

	// DatasetFiltersType The behavior of how BigQuery datasets should be selected.
	DatasetFiltersType *DatabaseDetailsBigQueryDatasetFiltersType `json:"dataset-filters-type,omitempty"`

	// ProjectId The ID of the GCP project containing the BigQuery datasets.
	ProjectId *string `json:"project-id,omitempty"`

	// ServiceAccountJson The content of the service account key file.
	ServiceAccountJson string `json:"service-account-json"`
}

// DatabaseDetailsBigQueryDatasetFiltersType The behavior of how BigQuery datasets should be selected.
type DatabaseDetailsBigQueryDatasetFiltersType string

// DatabaseDetailsCustom A JSON object containing database details for unsupported engines.
type DatabaseDetailsCustom map[string]interface{}

// DatabaseEngine The type of database to connect to.
type DatabaseEngine string

// DatabaseList The list of databases returned by the Metabase API.
type DatabaseList struct {
	// Data The list of databases.
	Data []Database `json:"data"`

	// Total The total number of databases.
	Total int `json:"total"`
}

// Field A field in a database.
type Field struct {
	// Description The description of the field.
	Description *string `json:"description"`

	// DisplayName The user-displayable name for the field.
	DisplayName string `json:"display_name"`

	// Id The ID of the field.
	Id int `json:"id"`

	// Name The name of the field (column) in the table.
	Name string `json:"name"`

	// SemanticType The semantic type used by Metabase to improve the display and use of the field.
	SemanticType *string `json:"semantic_type"`

	// TableId The ID of the parent table.
	TableId int `json:"table_id"`
}

// PermissionsGraph The entire permission graph for databases.
type PermissionsGraph struct {
	// Groups A map where keys are group IDs and values are permissions for this group.
	Groups map[string]PermissionsGraphDatabasePermissionsMap `json:"groups"`

	// Revision The revision of the permissions graph.
	Revision int `json:"revision"`
}

// PermissionsGraphDatabaseAccess The permissions for a single access type.
type PermissionsGraphDatabaseAccess struct {
	// Native Whether "Native query editing" is allowed.
	Native *PermissionsGraphDatabaseAccessNative `json:"native,omitempty"`

	// Schemas Whether "Data access" is allowed.
	Schemas *PermissionsGraphDatabaseAccessSchemas `json:"schemas,omitempty"`
}

// PermissionsGraphDatabaseAccessNative Whether "Native query editing" is allowed.
type PermissionsGraphDatabaseAccessNative string

// PermissionsGraphDatabaseAccessSchemas Whether "Data access" is allowed.
type PermissionsGraphDatabaseAccessSchemas string

// PermissionsGraphDatabasePermissions The permissions related to a single database.
type PermissionsGraphDatabasePermissions struct {
	// Data The permissions for a single access type.
	Data *PermissionsGraphDatabaseAccess `json:"data,omitempty"`

	// DataModel The permissions for a single access type.
	DataModel *PermissionsGraphDatabaseAccess `json:"data-model,omitempty"`

	// Details The permission definition for accessing details.
	Details *PermissionsGraphDatabasePermissionsDetails `json:"details,omitempty"`

	// Download The permissions for a single access type.
	Download *PermissionsGraphDatabaseAccess `json:"download,omitempty"`
}

// PermissionsGraphDatabasePermissionsDetails The permission definition for accessing details.
type PermissionsGraphDatabasePermissionsDetails string

// PermissionsGraphDatabasePermissionsMap A map where keys are database IDs and values are permissions related to the database.
type PermissionsGraphDatabasePermissionsMap map[string]PermissionsGraphDatabasePermissions

// PermissionsGroup A group of users to which permissions can be granted.
type PermissionsGroup struct {
	// Id The ID of the permissions group.
	Id int `json:"id"`

	// Name A user-displayable name for the group.
	Name string `json:"name"`
}

// Session A session that can be used to perform authenticated requests to the API.
type Session struct {
	Id string `json:"id"`
}

// Table A table in a database.
type Table struct {
	// DbId The ID of the parent database.
	DbId int `json:"db_id"`

	// Description A description for the table.
	Description *string `json:"description"`

	// DisplayName The name displayed in the interface for the table.
	DisplayName string `json:"display_name"`

	// EntityType The type of table.
	EntityType string `json:"entity_type"`

	// Id The ID of the table.
	Id int `json:"id"`

	// Name The name of the table.
	Name string `json:"name"`

	// Schema The database schema in which the table is located.
	// For BigQuery, this is the dataset name.
	Schema *string `json:"schema"`
}

// TableMetadata defines model for TableMetadata.
type TableMetadata struct {
	// DbId The ID of the parent database.
	DbId int `json:"db_id"`

	// Description A description for the table.
	Description *string `json:"description"`

	// DisplayName The name displayed in the interface for the table.
	DisplayName string `json:"display_name"`

	// EntityType The type of table.
	EntityType string `json:"entity_type"`

	// Fields The list of fields in the table.
	Fields []Field `json:"fields"`

	// Id The ID of the table.
	Id int `json:"id"`

	// Name The name of the table.
	Name string `json:"name"`

	// Schema The database schema in which the table is located.
	// For BigQuery, this is the dataset name.
	Schema *string `json:"schema"`
}

// UpdateCardBody The payload when updating an existing card.
type UpdateCardBody struct {
	// Archived Set to `true` to archive the card.
	Archived             *bool                  `json:"archived,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UpdateCollectionBody The payload used to update an existing collection.
type UpdateCollectionBody struct {
	// Archived Whether the collection is archived.
	// When archived, a collection no longer appears in the list publicly.
	Archived *bool `json:"archived,omitempty"`

	// Color A color for the collection.
	Color *string `json:"color,omitempty"`

	// Description A description for the collection.
	Description *string `json:"description"`

	// Name The name of the collection.
	Name *string `json:"name,omitempty"`

	// ParentId The ID of the parent collection, if any.
	ParentId *int `json:"parent_id"`
}

// UpdateDashboardBody The body of the payload when updating a dashboard.
type UpdateDashboardBody struct {
	// Archived Set to `true` to archive the dashboard.
	Archived *bool `json:"archived,omitempty"`

	// CacheTtl The cache TTL.
	CacheTtl *int `json:"cache_ttl"`

	// CollectionId The ID of the collection in which the dashboard is placed.
	CollectionId *int `json:"collection_id"`

	// CollectionPosition The position of the dashboard in the collection.
	CollectionPosition *int `json:"collection_position"`

	// Description A description for the dashboard.
	Description *string `json:"description"`

	// Name The name of the dashboard.
	Name *string `json:"name,omitempty"`

	// Parameters A list of parameters for the dashboard, that the user can tweak.
	Parameters *[]DashboardParameter `json:"parameters,omitempty"`
}

// UpdateDashboardCardsBody The payload when updating all cards in a dashboard.
type UpdateDashboardCardsBody struct {
	// Cards The list of cards in the dashboard.
	Cards []DashboardCard `json:"cards"`
}

// UpdateDatabaseBody The payload used to update an existing database.
type UpdateDatabaseBody struct {
	// Details Engine-specific details used to configure the connection to the database.
	Details *DatabaseDetails `json:"details,omitempty"`

	// Engine The type of database to connect to.
	Engine *DatabaseEngine `json:"engine,omitempty"`

	// Name The user-displayable name for the database.
	Name *string `json:"name,omitempty"`
}

// UpdateFieldBody The payload used to update a table field.
type UpdateFieldBody struct {
	// Description The description of the field.
	Description *string `json:"description"`

	// DisplayName The user-displayable name for the field.
	DisplayName *string `json:"display_name,omitempty"`

	// SemanticType The semantic type used by Metabase to improve the display and use of the field.
	SemanticType *string `json:"semantic_type"`
}

// UpdatePermissionsGroupBody The payload used to update an existing permissions group.
type UpdatePermissionsGroupBody struct {
	// Name A user-displayable name for the group.
	Name string `json:"name"`
}

// UpdateTableBody The payload used to update a table.
type UpdateTableBody struct {
	// Description A description for the table.
	Description *string `json:"description,omitempty"`

	// DisplayName The name displayed in the interface for the table.
	DisplayName *string `json:"display_name,omitempty"`

	// EntityType The type of table.
	EntityType *string `json:"entity_type,omitempty"`
}

// ListCollectionsParams defines parameters for ListCollections.
type ListCollectionsParams struct {
	// Archived Whether the archived collections should be returned.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// DeleteDashboardCardParams defines parameters for DeleteDashboardCard.
type DeleteDashboardCardParams struct {
	DashcardId int `form:"dashcardId" json:"dashcardId"`
}

// ListDatabasesParams defines parameters for ListDatabases.
type ListDatabasesParams struct {
	// Include Whether the returned databases should include the list of tables for each database.
	Include *ListDatabasesParamsInclude `form:"include,omitempty" json:"include,omitempty"`

	// Saved Whether the saved questions should appear as a virtual database.
	Saved *bool `form:"saved,omitempty" json:"saved,omitempty"`
}

// ListDatabasesParamsInclude defines parameters for ListDatabases.
type ListDatabasesParamsInclude string

// GetTableMetadataParams defines parameters for GetTableMetadata.
type GetTableMetadataParams struct {
	// IncludeHiddenFields Whether the query should return hidden fields.
	IncludeHiddenFields *bool `form:"include_hidden_fields,omitempty" json:"include_hidden_fields,omitempty"`
}

// CreateCardJSONRequestBody defines body for CreateCard for application/json ContentType.
type CreateCardJSONRequestBody = CreateCardBody

// UpdateCardJSONRequestBody defines body for UpdateCard for application/json ContentType.
type UpdateCardJSONRequestBody = UpdateCardBody

// CreateCollectionJSONRequestBody defines body for CreateCollection for application/json ContentType.
type CreateCollectionJSONRequestBody = CreateCollectionBody

// ReplaceCollectionPermissionsGraphJSONRequestBody defines body for ReplaceCollectionPermissionsGraph for application/json ContentType.
type ReplaceCollectionPermissionsGraphJSONRequestBody = CollectionPermissionsGraph

// UpdateCollectionJSONRequestBody defines body for UpdateCollection for application/json ContentType.
type UpdateCollectionJSONRequestBody = UpdateCollectionBody

// CreateDashboardJSONRequestBody defines body for CreateDashboard for application/json ContentType.
type CreateDashboardJSONRequestBody = CreateDashboardBody

// UpdateDashboardJSONRequestBody defines body for UpdateDashboard for application/json ContentType.
type UpdateDashboardJSONRequestBody = UpdateDashboardBody

// CreateDashboardCardJSONRequestBody defines body for CreateDashboardCard for application/json ContentType.
type CreateDashboardCardJSONRequestBody = CreateDashboardCardBody

// UpdateDashboardCardsJSONRequestBody defines body for UpdateDashboardCards for application/json ContentType.
type UpdateDashboardCardsJSONRequestBody = UpdateDashboardCardsBody

// CreateDatabaseJSONRequestBody defines body for CreateDatabase for application/json ContentType.
type CreateDatabaseJSONRequestBody = CreateDatabaseBody

// UpdateDatabaseJSONRequestBody defines body for UpdateDatabase for application/json ContentType.
type UpdateDatabaseJSONRequestBody = UpdateDatabaseBody

// UpdateFieldJSONRequestBody defines body for UpdateField for application/json ContentType.
type UpdateFieldJSONRequestBody = UpdateFieldBody

// ReplacePermissionsGraphJSONRequestBody defines body for ReplacePermissionsGraph for application/json ContentType.
type ReplacePermissionsGraphJSONRequestBody = PermissionsGraph

// CreatePermissionsGroupJSONRequestBody defines body for CreatePermissionsGroup for application/json ContentType.
type CreatePermissionsGroupJSONRequestBody = CreatePermissionsGroupBody

// UpdatePermissionsGroupJSONRequestBody defines body for UpdatePermissionsGroup for application/json ContentType.
type UpdatePermissionsGroupJSONRequestBody = UpdatePermissionsGroupBody

// CreateSessionJSONRequestBody defines body for CreateSession for application/json ContentType.
type CreateSessionJSONRequestBody = CreateSessionBody

// UpdateTableJSONRequestBody defines body for UpdateTable for application/json ContentType.
type UpdateTableJSONRequestBody = UpdateTableBody

// Getter for additional properties for Card. Returns the specified
// element and whether it was found
func (a Card) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Card
func (a *Card) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Card to handle AdditionalProperties
func (a *Card) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["archived"]; found {
		err = json.Unmarshal(raw, &a.Archived)
		if err != nil {
			return fmt.Errorf("error reading 'archived': %w", err)
		}
		delete(object, "archived")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshalling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Card to handle AdditionalProperties
func (a Card) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["archived"], err = json.Marshal(a.Archived)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'archived': %w", err)
	}

	object["id"], err = json.Marshal(a.Id)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpdateCardBody. Returns the specified
// element and whether it was found
func (a UpdateCardBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpdateCardBody
func (a *UpdateCardBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpdateCardBody to handle AdditionalProperties
func (a *UpdateCardBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["archived"]; found {
		err = json.Unmarshal(raw, &a.Archived)
		if err != nil {
			return fmt.Errorf("error reading 'archived': %w", err)
		}
		delete(object, "archived")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshalling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpdateCardBody to handle AdditionalProperties
func (a UpdateCardBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Archived != nil {
		object["archived"], err = json.Marshal(a.Archived)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'archived': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsCollectionId0 returns the union data inside the Collection_Id as a CollectionId0
func (t Collection_Id) AsCollectionId0() (CollectionId0, error) {
	var body CollectionId0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCollectionId0 overwrites any union data inside the Collection_Id as the provided CollectionId0
func (t *Collection_Id) FromCollectionId0(v CollectionId0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCollectionId0 performs a merge with any union data inside the Collection_Id, using the provided CollectionId0
func (t *Collection_Id) MergeCollectionId0(v CollectionId0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsCollectionId1 returns the union data inside the Collection_Id as a CollectionId1
func (t Collection_Id) AsCollectionId1() (CollectionId1, error) {
	var body CollectionId1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCollectionId1 overwrites any union data inside the Collection_Id as the provided CollectionId1
func (t *Collection_Id) FromCollectionId1(v CollectionId1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCollectionId1 performs a merge with any union data inside the Collection_Id, using the provided CollectionId1
func (t *Collection_Id) MergeCollectionId1(v CollectionId1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Collection_Id) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Collection_Id) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDashboardParameterDefault0 returns the union data inside the DashboardParameter_Default as a DashboardParameterDefault0
func (t DashboardParameter_Default) AsDashboardParameterDefault0() (DashboardParameterDefault0, error) {
	var body DashboardParameterDefault0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDashboardParameterDefault0 overwrites any union data inside the DashboardParameter_Default as the provided DashboardParameterDefault0
func (t *DashboardParameter_Default) FromDashboardParameterDefault0(v DashboardParameterDefault0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDashboardParameterDefault0 performs a merge with any union data inside the DashboardParameter_Default, using the provided DashboardParameterDefault0
func (t *DashboardParameter_Default) MergeDashboardParameterDefault0(v DashboardParameterDefault0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsDashboardParameterDefault1 returns the union data inside the DashboardParameter_Default as a DashboardParameterDefault1
func (t DashboardParameter_Default) AsDashboardParameterDefault1() (DashboardParameterDefault1, error) {
	var body DashboardParameterDefault1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDashboardParameterDefault1 overwrites any union data inside the DashboardParameter_Default as the provided DashboardParameterDefault1
func (t *DashboardParameter_Default) FromDashboardParameterDefault1(v DashboardParameterDefault1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDashboardParameterDefault1 performs a merge with any union data inside the DashboardParameter_Default, using the provided DashboardParameterDefault1
func (t *DashboardParameter_Default) MergeDashboardParameterDefault1(v DashboardParameterDefault1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t DashboardParameter_Default) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DashboardParameter_Default) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDatabaseDetailsBigQuery returns the union data inside the DatabaseDetails as a DatabaseDetailsBigQuery
func (t DatabaseDetails) AsDatabaseDetailsBigQuery() (DatabaseDetailsBigQuery, error) {
	var body DatabaseDetailsBigQuery
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseDetailsBigQuery overwrites any union data inside the DatabaseDetails as the provided DatabaseDetailsBigQuery
func (t *DatabaseDetails) FromDatabaseDetailsBigQuery(v DatabaseDetailsBigQuery) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseDetailsBigQuery performs a merge with any union data inside the DatabaseDetails, using the provided DatabaseDetailsBigQuery
func (t *DatabaseDetails) MergeDatabaseDetailsBigQuery(v DatabaseDetailsBigQuery) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsDatabaseDetailsCustom returns the union data inside the DatabaseDetails as a DatabaseDetailsCustom
func (t DatabaseDetails) AsDatabaseDetailsCustom() (DatabaseDetailsCustom, error) {
	var body DatabaseDetailsCustom
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatabaseDetailsCustom overwrites any union data inside the DatabaseDetails as the provided DatabaseDetailsCustom
func (t *DatabaseDetails) FromDatabaseDetailsCustom(v DatabaseDetailsCustom) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatabaseDetailsCustom performs a merge with any union data inside the DatabaseDetails, using the provided DatabaseDetailsCustom
func (t *DatabaseDetails) MergeDatabaseDetailsCustom(v DatabaseDetailsCustom) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t DatabaseDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DatabaseDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateCard request with any body
	CreateCardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCard(ctx context.Context, body CreateCardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCard request
	GetCard(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCard request with any body
	UpdateCardWithBody(ctx context.Context, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCard(ctx context.Context, cardId int, body UpdateCardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCollections request
	ListCollections(ctx context.Context, params *ListCollectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCollection request with any body
	CreateCollectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCollection(ctx context.Context, body CreateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollectionPermissionsGraph request
	GetCollectionPermissionsGraph(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceCollectionPermissionsGraph request with any body
	ReplaceCollectionPermissionsGraphWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceCollectionPermissionsGraph(ctx context.Context, body ReplaceCollectionPermissionsGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollection request
	GetCollection(ctx context.Context, collectionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCollection request with any body
	UpdateCollectionWithBody(ctx context.Context, collectionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCollection(ctx context.Context, collectionId string, body UpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDashboards request
	ListDashboards(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDashboard request with any body
	CreateDashboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDashboard(ctx context.Context, body CreateDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDashboard request
	DeleteDashboard(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboard request
	GetDashboard(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDashboard request with any body
	UpdateDashboardWithBody(ctx context.Context, dashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDashboard(ctx context.Context, dashboardId int, body UpdateDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDashboardCard request
	DeleteDashboardCard(ctx context.Context, dashboardId int, params *DeleteDashboardCardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDashboardCard request with any body
	CreateDashboardCardWithBody(ctx context.Context, dashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDashboardCard(ctx context.Context, dashboardId int, body CreateDashboardCardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDashboardCards request with any body
	UpdateDashboardCardsWithBody(ctx context.Context, dashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDashboardCards(ctx context.Context, dashboardId int, body UpdateDashboardCardsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDatabases request
	ListDatabases(ctx context.Context, params *ListDatabasesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDatabase request with any body
	CreateDatabaseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDatabase(ctx context.Context, body CreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDatabase request
	DeleteDatabase(ctx context.Context, databaseId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatabase request
	GetDatabase(ctx context.Context, databaseId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDatabase request with any body
	UpdateDatabaseWithBody(ctx context.Context, databaseId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDatabase(ctx context.Context, databaseId int, body UpdateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetField request
	GetField(ctx context.Context, fieldId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateField request with any body
	UpdateFieldWithBody(ctx context.Context, fieldId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateField(ctx context.Context, fieldId int, body UpdateFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissionsGraph request
	GetPermissionsGraph(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplacePermissionsGraph request with any body
	ReplacePermissionsGraphWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplacePermissionsGraph(ctx context.Context, body ReplacePermissionsGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePermissionsGroup request with any body
	CreatePermissionsGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePermissionsGroup(ctx context.Context, body CreatePermissionsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePermissionsGroup request
	DeletePermissionsGroup(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissionsGroup request
	GetPermissionsGroup(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePermissionsGroup request with any body
	UpdatePermissionsGroupWithBody(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePermissionsGroup(ctx context.Context, groupId int, body UpdatePermissionsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSession request with any body
	CreateSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSession(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTables request
	ListTables(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTable request with any body
	UpdateTableWithBody(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTable(ctx context.Context, tableId int, body UpdateTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTableMetadata request
	GetTableMetadata(ctx context.Context, tableId int, params *GetTableMetadataParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateCardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCard(ctx context.Context, body CreateCardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCardRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCard(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCardRequest(c.Server, cardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCardWithBody(ctx context.Context, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCardRequestWithBody(c.Server, cardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCard(ctx context.Context, cardId int, body UpdateCardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCardRequest(c.Server, cardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCollections(ctx context.Context, params *ListCollectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCollectionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCollectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCollectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCollection(ctx context.Context, body CreateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCollectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollectionPermissionsGraph(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionPermissionsGraphRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceCollectionPermissionsGraphWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceCollectionPermissionsGraphRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceCollectionPermissionsGraph(ctx context.Context, body ReplaceCollectionPermissionsGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceCollectionPermissionsGraphRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollection(ctx context.Context, collectionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionRequest(c.Server, collectionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCollectionWithBody(ctx context.Context, collectionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCollectionRequestWithBody(c.Server, collectionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCollection(ctx context.Context, collectionId string, body UpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCollectionRequest(c.Server, collectionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDashboards(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDashboardsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDashboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDashboardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDashboard(ctx context.Context, body CreateDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDashboardRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDashboard(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDashboardRequest(c.Server, dashboardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboard(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardRequest(c.Server, dashboardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDashboardWithBody(ctx context.Context, dashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDashboardRequestWithBody(c.Server, dashboardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDashboard(ctx context.Context, dashboardId int, body UpdateDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDashboardRequest(c.Server, dashboardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDashboardCard(ctx context.Context, dashboardId int, params *DeleteDashboardCardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDashboardCardRequest(c.Server, dashboardId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDashboardCardWithBody(ctx context.Context, dashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDashboardCardRequestWithBody(c.Server, dashboardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDashboardCard(ctx context.Context, dashboardId int, body CreateDashboardCardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDashboardCardRequest(c.Server, dashboardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDashboardCardsWithBody(ctx context.Context, dashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDashboardCardsRequestWithBody(c.Server, dashboardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDashboardCards(ctx context.Context, dashboardId int, body UpdateDashboardCardsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDashboardCardsRequest(c.Server, dashboardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDatabases(ctx context.Context, params *ListDatabasesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDatabasesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDatabaseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDatabaseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDatabase(ctx context.Context, body CreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDatabaseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDatabase(ctx context.Context, databaseId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDatabaseRequest(c.Server, databaseId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatabase(ctx context.Context, databaseId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabaseRequest(c.Server, databaseId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDatabaseWithBody(ctx context.Context, databaseId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDatabaseRequestWithBody(c.Server, databaseId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDatabase(ctx context.Context, databaseId int, body UpdateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDatabaseRequest(c.Server, databaseId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetField(ctx context.Context, fieldId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFieldRequest(c.Server, fieldId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFieldWithBody(ctx context.Context, fieldId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFieldRequestWithBody(c.Server, fieldId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateField(ctx context.Context, fieldId int, body UpdateFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFieldRequest(c.Server, fieldId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissionsGraph(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionsGraphRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacePermissionsGraphWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplacePermissionsGraphRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacePermissionsGraph(ctx context.Context, body ReplacePermissionsGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplacePermissionsGraphRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePermissionsGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePermissionsGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePermissionsGroup(ctx context.Context, body CreatePermissionsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePermissionsGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePermissionsGroup(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePermissionsGroupRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissionsGroup(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionsGroupRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePermissionsGroupWithBody(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePermissionsGroupRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePermissionsGroup(ctx context.Context, groupId int, body UpdatePermissionsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePermissionsGroupRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSession(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTables(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTablesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTableWithBody(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTableRequestWithBody(c.Server, tableId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTable(ctx context.Context, tableId int, body UpdateTableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTableRequest(c.Server, tableId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTableMetadata(ctx context.Context, tableId int, params *GetTableMetadataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTableMetadataRequest(c.Server, tableId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateCardRequest calls the generic CreateCard builder with application/json body
func NewCreateCardRequest(server string, body CreateCardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCardRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCardRequestWithBody generates requests for CreateCard with any type of body
func NewCreateCardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCardRequest generates requests for GetCard
func NewGetCardRequest(server string, cardId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cardId", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCardRequest calls the generic UpdateCard builder with application/json body
func NewUpdateCardRequest(server string, cardId int, body UpdateCardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCardRequestWithBody(server, cardId, "application/json", bodyReader)
}

// NewUpdateCardRequestWithBody generates requests for UpdateCard with any type of body
func NewUpdateCardRequestWithBody(server string, cardId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cardId", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/card/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCollectionsRequest generates requests for ListCollections
func NewListCollectionsRequest(server string, params *ListCollectionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Archived != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCollectionRequest calls the generic CreateCollection builder with application/json body
func NewCreateCollectionRequest(server string, body CreateCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCollectionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCollectionRequestWithBody generates requests for CreateCollection with any type of body
func NewCreateCollectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCollectionPermissionsGraphRequest generates requests for GetCollectionPermissionsGraph
func NewGetCollectionPermissionsGraphRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collection/graph")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceCollectionPermissionsGraphRequest calls the generic ReplaceCollectionPermissionsGraph builder with application/json body
func NewReplaceCollectionPermissionsGraphRequest(server string, body ReplaceCollectionPermissionsGraphJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceCollectionPermissionsGraphRequestWithBody(server, "application/json", bodyReader)
}

// NewReplaceCollectionPermissionsGraphRequestWithBody generates requests for ReplaceCollectionPermissionsGraph with any type of body
func NewReplaceCollectionPermissionsGraphRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collection/graph")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCollectionRequest generates requests for GetCollection
func NewGetCollectionRequest(server string, collectionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collectionId", runtime.ParamLocationPath, collectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collection/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCollectionRequest calls the generic UpdateCollection builder with application/json body
func NewUpdateCollectionRequest(server string, collectionId string, body UpdateCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCollectionRequestWithBody(server, collectionId, "application/json", bodyReader)
}

// NewUpdateCollectionRequestWithBody generates requests for UpdateCollection with any type of body
func NewUpdateCollectionRequestWithBody(server string, collectionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collectionId", runtime.ParamLocationPath, collectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collection/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDashboardsRequest generates requests for ListDashboards
func NewListDashboardsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDashboardRequest calls the generic CreateDashboard builder with application/json body
func NewCreateDashboardRequest(server string, body CreateDashboardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDashboardRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDashboardRequestWithBody generates requests for CreateDashboard with any type of body
func NewCreateDashboardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDashboardRequest generates requests for DeleteDashboard
func NewDeleteDashboardRequest(server string, dashboardId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboardId", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardRequest generates requests for GetDashboard
func NewGetDashboardRequest(server string, dashboardId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboardId", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDashboardRequest calls the generic UpdateDashboard builder with application/json body
func NewUpdateDashboardRequest(server string, dashboardId int, body UpdateDashboardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDashboardRequestWithBody(server, dashboardId, "application/json", bodyReader)
}

// NewUpdateDashboardRequestWithBody generates requests for UpdateDashboard with any type of body
func NewUpdateDashboardRequestWithBody(server string, dashboardId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboardId", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDashboardCardRequest generates requests for DeleteDashboardCard
func NewDeleteDashboardCardRequest(server string, dashboardId int, params *DeleteDashboardCardParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboardId", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s/cards", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dashcardId", runtime.ParamLocationQuery, params.DashcardId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDashboardCardRequest calls the generic CreateDashboardCard builder with application/json body
func NewCreateDashboardCardRequest(server string, dashboardId int, body CreateDashboardCardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDashboardCardRequestWithBody(server, dashboardId, "application/json", bodyReader)
}

// NewCreateDashboardCardRequestWithBody generates requests for CreateDashboardCard with any type of body
func NewCreateDashboardCardRequestWithBody(server string, dashboardId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboardId", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s/cards", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateDashboardCardsRequest calls the generic UpdateDashboardCards builder with application/json body
func NewUpdateDashboardCardsRequest(server string, dashboardId int, body UpdateDashboardCardsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDashboardCardsRequestWithBody(server, dashboardId, "application/json", bodyReader)
}

// NewUpdateDashboardCardsRequestWithBody generates requests for UpdateDashboardCards with any type of body
func NewUpdateDashboardCardsRequestWithBody(server string, dashboardId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dashboardId", runtime.ParamLocationPath, dashboardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard/%s/cards", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDatabasesRequest generates requests for ListDatabases
func NewListDatabasesRequest(server string, params *ListDatabasesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Include != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Saved != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "saved", runtime.ParamLocationQuery, *params.Saved); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDatabaseRequest calls the generic CreateDatabase builder with application/json body
func NewCreateDatabaseRequest(server string, body CreateDatabaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDatabaseRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDatabaseRequestWithBody generates requests for CreateDatabase with any type of body
func NewCreateDatabaseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDatabaseRequest generates requests for DeleteDatabase
func NewDeleteDatabaseRequest(server string, databaseId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "databaseId", runtime.ParamLocationPath, databaseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatabaseRequest generates requests for GetDatabase
func NewGetDatabaseRequest(server string, databaseId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "databaseId", runtime.ParamLocationPath, databaseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDatabaseRequest calls the generic UpdateDatabase builder with application/json body
func NewUpdateDatabaseRequest(server string, databaseId int, body UpdateDatabaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDatabaseRequestWithBody(server, databaseId, "application/json", bodyReader)
}

// NewUpdateDatabaseRequestWithBody generates requests for UpdateDatabase with any type of body
func NewUpdateDatabaseRequestWithBody(server string, databaseId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "databaseId", runtime.ParamLocationPath, databaseId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/database/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFieldRequest generates requests for GetField
func NewGetFieldRequest(server string, fieldId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fieldId", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/field/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFieldRequest calls the generic UpdateField builder with application/json body
func NewUpdateFieldRequest(server string, fieldId int, body UpdateFieldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFieldRequestWithBody(server, fieldId, "application/json", bodyReader)
}

// NewUpdateFieldRequestWithBody generates requests for UpdateField with any type of body
func NewUpdateFieldRequestWithBody(server string, fieldId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fieldId", runtime.ParamLocationPath, fieldId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/field/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPermissionsGraphRequest generates requests for GetPermissionsGraph
func NewGetPermissionsGraphRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/graph")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplacePermissionsGraphRequest calls the generic ReplacePermissionsGraph builder with application/json body
func NewReplacePermissionsGraphRequest(server string, body ReplacePermissionsGraphJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacePermissionsGraphRequestWithBody(server, "application/json", bodyReader)
}

// NewReplacePermissionsGraphRequestWithBody generates requests for ReplacePermissionsGraph with any type of body
func NewReplacePermissionsGraphRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/graph")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreatePermissionsGroupRequest calls the generic CreatePermissionsGroup builder with application/json body
func NewCreatePermissionsGroupRequest(server string, body CreatePermissionsGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePermissionsGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePermissionsGroupRequestWithBody generates requests for CreatePermissionsGroup with any type of body
func NewCreatePermissionsGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePermissionsGroupRequest generates requests for DeletePermissionsGroup
func NewDeletePermissionsGroupRequest(server string, groupId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/group/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPermissionsGroupRequest generates requests for GetPermissionsGroup
func NewGetPermissionsGroupRequest(server string, groupId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/group/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePermissionsGroupRequest calls the generic UpdatePermissionsGroup builder with application/json body
func NewUpdatePermissionsGroupRequest(server string, groupId int, body UpdatePermissionsGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePermissionsGroupRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewUpdatePermissionsGroupRequestWithBody generates requests for UpdatePermissionsGroup with any type of body
func NewUpdatePermissionsGroupRequestWithBody(server string, groupId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions/group/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSessionRequest calls the generic CreateSession builder with application/json body
func NewCreateSessionRequest(server string, body CreateSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSessionRequestWithBody generates requests for CreateSession with any type of body
func NewCreateSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/session")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTablesRequest generates requests for ListTables
func NewListTablesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/table")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTableRequest calls the generic UpdateTable builder with application/json body
func NewUpdateTableRequest(server string, tableId int, body UpdateTableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTableRequestWithBody(server, tableId, "application/json", bodyReader)
}

// NewUpdateTableRequestWithBody generates requests for UpdateTable with any type of body
func NewUpdateTableRequestWithBody(server string, tableId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tableId", runtime.ParamLocationPath, tableId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/table/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTableMetadataRequest generates requests for GetTableMetadata
func NewGetTableMetadataRequest(server string, tableId int, params *GetTableMetadataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tableId", runtime.ParamLocationPath, tableId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/table/%s/query_metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeHiddenFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_hidden_fields", runtime.ParamLocationQuery, *params.IncludeHiddenFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateCard request with any body
	CreateCardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCardResponse, error)

	CreateCardWithResponse(ctx context.Context, body CreateCardJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCardResponse, error)

	// GetCard request
	GetCardWithResponse(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*GetCardResponse, error)

	// UpdateCard request with any body
	UpdateCardWithBodyWithResponse(ctx context.Context, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCardResponse, error)

	UpdateCardWithResponse(ctx context.Context, cardId int, body UpdateCardJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCardResponse, error)

	// ListCollections request
	ListCollectionsWithResponse(ctx context.Context, params *ListCollectionsParams, reqEditors ...RequestEditorFn) (*ListCollectionsResponse, error)

	// CreateCollection request with any body
	CreateCollectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCollectionResponse, error)

	CreateCollectionWithResponse(ctx context.Context, body CreateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCollectionResponse, error)

	// GetCollectionPermissionsGraph request
	GetCollectionPermissionsGraphWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCollectionPermissionsGraphResponse, error)

	// ReplaceCollectionPermissionsGraph request with any body
	ReplaceCollectionPermissionsGraphWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceCollectionPermissionsGraphResponse, error)

	ReplaceCollectionPermissionsGraphWithResponse(ctx context.Context, body ReplaceCollectionPermissionsGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceCollectionPermissionsGraphResponse, error)

	// GetCollection request
	GetCollectionWithResponse(ctx context.Context, collectionId string, reqEditors ...RequestEditorFn) (*GetCollectionResponse, error)

	// UpdateCollection request with any body
	UpdateCollectionWithBodyWithResponse(ctx context.Context, collectionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCollectionResponse, error)

	UpdateCollectionWithResponse(ctx context.Context, collectionId string, body UpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCollectionResponse, error)

	// ListDashboards request
	ListDashboardsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListDashboardsResponse, error)

	// CreateDashboard request with any body
	CreateDashboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDashboardResponse, error)

	CreateDashboardWithResponse(ctx context.Context, body CreateDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDashboardResponse, error)

	// DeleteDashboard request
	DeleteDashboardWithResponse(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*DeleteDashboardResponse, error)

	// GetDashboard request
	GetDashboardWithResponse(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*GetDashboardResponse, error)

	// UpdateDashboard request with any body
	UpdateDashboardWithBodyWithResponse(ctx context.Context, dashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDashboardResponse, error)

	UpdateDashboardWithResponse(ctx context.Context, dashboardId int, body UpdateDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDashboardResponse, error)

	// DeleteDashboardCard request
	DeleteDashboardCardWithResponse(ctx context.Context, dashboardId int, params *DeleteDashboardCardParams, reqEditors ...RequestEditorFn) (*DeleteDashboardCardResponse, error)

	// CreateDashboardCard request with any body
	CreateDashboardCardWithBodyWithResponse(ctx context.Context, dashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDashboardCardResponse, error)

	CreateDashboardCardWithResponse(ctx context.Context, dashboardId int, body CreateDashboardCardJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDashboardCardResponse, error)

	// UpdateDashboardCards request with any body
	UpdateDashboardCardsWithBodyWithResponse(ctx context.Context, dashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDashboardCardsResponse, error)

	UpdateDashboardCardsWithResponse(ctx context.Context, dashboardId int, body UpdateDashboardCardsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDashboardCardsResponse, error)

	// ListDatabases request
	ListDatabasesWithResponse(ctx context.Context, params *ListDatabasesParams, reqEditors ...RequestEditorFn) (*ListDatabasesResponse, error)

	// CreateDatabase request with any body
	CreateDatabaseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDatabaseResponse, error)

	CreateDatabaseWithResponse(ctx context.Context, body CreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDatabaseResponse, error)

	// DeleteDatabase request
	DeleteDatabaseWithResponse(ctx context.Context, databaseId int, reqEditors ...RequestEditorFn) (*DeleteDatabaseResponse, error)

	// GetDatabase request
	GetDatabaseWithResponse(ctx context.Context, databaseId int, reqEditors ...RequestEditorFn) (*GetDatabaseResponse, error)

	// UpdateDatabase request with any body
	UpdateDatabaseWithBodyWithResponse(ctx context.Context, databaseId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDatabaseResponse, error)

	UpdateDatabaseWithResponse(ctx context.Context, databaseId int, body UpdateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDatabaseResponse, error)

	// GetField request
	GetFieldWithResponse(ctx context.Context, fieldId int, reqEditors ...RequestEditorFn) (*GetFieldResponse, error)

	// UpdateField request with any body
	UpdateFieldWithBodyWithResponse(ctx context.Context, fieldId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFieldResponse, error)

	UpdateFieldWithResponse(ctx context.Context, fieldId int, body UpdateFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFieldResponse, error)

	// GetPermissionsGraph request
	GetPermissionsGraphWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPermissionsGraphResponse, error)

	// ReplacePermissionsGraph request with any body
	ReplacePermissionsGraphWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplacePermissionsGraphResponse, error)

	ReplacePermissionsGraphWithResponse(ctx context.Context, body ReplacePermissionsGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplacePermissionsGraphResponse, error)

	// CreatePermissionsGroup request with any body
	CreatePermissionsGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePermissionsGroupResponse, error)

	CreatePermissionsGroupWithResponse(ctx context.Context, body CreatePermissionsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePermissionsGroupResponse, error)

	// DeletePermissionsGroup request
	DeletePermissionsGroupWithResponse(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*DeletePermissionsGroupResponse, error)

	// GetPermissionsGroup request
	GetPermissionsGroupWithResponse(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*GetPermissionsGroupResponse, error)

	// UpdatePermissionsGroup request with any body
	UpdatePermissionsGroupWithBodyWithResponse(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePermissionsGroupResponse, error)

	UpdatePermissionsGroupWithResponse(ctx context.Context, groupId int, body UpdatePermissionsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePermissionsGroupResponse, error)

	// CreateSession request with any body
	CreateSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error)

	CreateSessionWithResponse(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error)

	// ListTables request
	ListTablesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListTablesResponse, error)

	// UpdateTable request with any body
	UpdateTableWithBodyWithResponse(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTableResponse, error)

	UpdateTableWithResponse(ctx context.Context, tableId int, body UpdateTableJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTableResponse, error)

	// GetTableMetadata request
	GetTableMetadataWithResponse(ctx context.Context, tableId int, params *GetTableMetadataParams, reqEditors ...RequestEditorFn) (*GetTableMetadataResponse, error)
}

type CreateCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Card
}

// Status returns HTTPResponse.Status
func (r CreateCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Card
}

// Status returns HTTPResponse.Status
func (r GetCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Card
}

// Status returns HTTPResponse.Status
func (r UpdateCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Collection
}

// Status returns HTTPResponse.Status
func (r ListCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Collection
}

// Status returns HTTPResponse.Status
func (r CreateCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionPermissionsGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionPermissionsGraph
}

// Status returns HTTPResponse.Status
func (r GetCollectionPermissionsGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionPermissionsGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceCollectionPermissionsGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionPermissionsGraph
}

// Status returns HTTPResponse.Status
func (r ReplaceCollectionPermissionsGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceCollectionPermissionsGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Collection
}

// Status returns HTTPResponse.Status
func (r GetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Collection
}

// Status returns HTTPResponse.Status
func (r UpdateCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDashboardsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Dashboard
}

// Status returns HTTPResponse.Status
func (r ListDashboardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDashboardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dashboard
}

// Status returns HTTPResponse.Status
func (r CreateDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DashboardWithCards
}

// Status returns HTTPResponse.Status
func (r GetDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dashboard
}

// Status returns HTTPResponse.Status
func (r UpdateDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDashboardCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDashboardCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDashboardCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDashboardCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DashboardCard
}

// Status returns HTTPResponse.Status
func (r CreateDashboardCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDashboardCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDashboardCardsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Status The return status of the operation.
		Status string `json:"status"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateDashboardCardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDashboardCardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDatabasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseList
}

// Status returns HTTPResponse.Status
func (r ListDatabasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDatabasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Database
}

// Status returns HTTPResponse.Status
func (r CreateDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Database
}

// Status returns HTTPResponse.Status
func (r GetDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Database
}

// Status returns HTTPResponse.Status
func (r UpdateDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Field
}

// Status returns HTTPResponse.Status
func (r GetFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Field
}

// Status returns HTTPResponse.Status
func (r UpdateFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPermissionsGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionsGraph
}

// Status returns HTTPResponse.Status
func (r GetPermissionsGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionsGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacePermissionsGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionsGraph
}

// Status returns HTTPResponse.Status
func (r ReplacePermissionsGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacePermissionsGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePermissionsGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionsGroup
}

// Status returns HTTPResponse.Status
func (r CreatePermissionsGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePermissionsGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePermissionsGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePermissionsGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePermissionsGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPermissionsGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionsGroup
}

// Status returns HTTPResponse.Status
func (r GetPermissionsGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionsGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePermissionsGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionsGroup
}

// Status returns HTTPResponse.Status
func (r UpdatePermissionsGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePermissionsGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Session
}

// Status returns HTTPResponse.Status
func (r CreateSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Table
}

// Status returns HTTPResponse.Status
func (r ListTablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Table
}

// Status returns HTTPResponse.Status
func (r UpdateTableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTableMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TableMetadata
}

// Status returns HTTPResponse.Status
func (r GetTableMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTableMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateCardWithBodyWithResponse request with arbitrary body returning *CreateCardResponse
func (c *ClientWithResponses) CreateCardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCardResponse, error) {
	rsp, err := c.CreateCardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCardResponse(rsp)
}

func (c *ClientWithResponses) CreateCardWithResponse(ctx context.Context, body CreateCardJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCardResponse, error) {
	rsp, err := c.CreateCard(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCardResponse(rsp)
}

// GetCardWithResponse request returning *GetCardResponse
func (c *ClientWithResponses) GetCardWithResponse(ctx context.Context, cardId int, reqEditors ...RequestEditorFn) (*GetCardResponse, error) {
	rsp, err := c.GetCard(ctx, cardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCardResponse(rsp)
}

// UpdateCardWithBodyWithResponse request with arbitrary body returning *UpdateCardResponse
func (c *ClientWithResponses) UpdateCardWithBodyWithResponse(ctx context.Context, cardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCardResponse, error) {
	rsp, err := c.UpdateCardWithBody(ctx, cardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCardResponse(rsp)
}

func (c *ClientWithResponses) UpdateCardWithResponse(ctx context.Context, cardId int, body UpdateCardJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCardResponse, error) {
	rsp, err := c.UpdateCard(ctx, cardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCardResponse(rsp)
}

// ListCollectionsWithResponse request returning *ListCollectionsResponse
func (c *ClientWithResponses) ListCollectionsWithResponse(ctx context.Context, params *ListCollectionsParams, reqEditors ...RequestEditorFn) (*ListCollectionsResponse, error) {
	rsp, err := c.ListCollections(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCollectionsResponse(rsp)
}

// CreateCollectionWithBodyWithResponse request with arbitrary body returning *CreateCollectionResponse
func (c *ClientWithResponses) CreateCollectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCollectionResponse, error) {
	rsp, err := c.CreateCollectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCollectionResponse(rsp)
}

func (c *ClientWithResponses) CreateCollectionWithResponse(ctx context.Context, body CreateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCollectionResponse, error) {
	rsp, err := c.CreateCollection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCollectionResponse(rsp)
}

// GetCollectionPermissionsGraphWithResponse request returning *GetCollectionPermissionsGraphResponse
func (c *ClientWithResponses) GetCollectionPermissionsGraphWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCollectionPermissionsGraphResponse, error) {
	rsp, err := c.GetCollectionPermissionsGraph(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionPermissionsGraphResponse(rsp)
}

// ReplaceCollectionPermissionsGraphWithBodyWithResponse request with arbitrary body returning *ReplaceCollectionPermissionsGraphResponse
func (c *ClientWithResponses) ReplaceCollectionPermissionsGraphWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceCollectionPermissionsGraphResponse, error) {
	rsp, err := c.ReplaceCollectionPermissionsGraphWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceCollectionPermissionsGraphResponse(rsp)
}

func (c *ClientWithResponses) ReplaceCollectionPermissionsGraphWithResponse(ctx context.Context, body ReplaceCollectionPermissionsGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceCollectionPermissionsGraphResponse, error) {
	rsp, err := c.ReplaceCollectionPermissionsGraph(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceCollectionPermissionsGraphResponse(rsp)
}

// GetCollectionWithResponse request returning *GetCollectionResponse
func (c *ClientWithResponses) GetCollectionWithResponse(ctx context.Context, collectionId string, reqEditors ...RequestEditorFn) (*GetCollectionResponse, error) {
	rsp, err := c.GetCollection(ctx, collectionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionResponse(rsp)
}

// UpdateCollectionWithBodyWithResponse request with arbitrary body returning *UpdateCollectionResponse
func (c *ClientWithResponses) UpdateCollectionWithBodyWithResponse(ctx context.Context, collectionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCollectionResponse, error) {
	rsp, err := c.UpdateCollectionWithBody(ctx, collectionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCollectionResponse(rsp)
}

func (c *ClientWithResponses) UpdateCollectionWithResponse(ctx context.Context, collectionId string, body UpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCollectionResponse, error) {
	rsp, err := c.UpdateCollection(ctx, collectionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCollectionResponse(rsp)
}

// ListDashboardsWithResponse request returning *ListDashboardsResponse
func (c *ClientWithResponses) ListDashboardsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListDashboardsResponse, error) {
	rsp, err := c.ListDashboards(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDashboardsResponse(rsp)
}

// CreateDashboardWithBodyWithResponse request with arbitrary body returning *CreateDashboardResponse
func (c *ClientWithResponses) CreateDashboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDashboardResponse, error) {
	rsp, err := c.CreateDashboardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDashboardResponse(rsp)
}

func (c *ClientWithResponses) CreateDashboardWithResponse(ctx context.Context, body CreateDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDashboardResponse, error) {
	rsp, err := c.CreateDashboard(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDashboardResponse(rsp)
}

// DeleteDashboardWithResponse request returning *DeleteDashboardResponse
func (c *ClientWithResponses) DeleteDashboardWithResponse(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*DeleteDashboardResponse, error) {
	rsp, err := c.DeleteDashboard(ctx, dashboardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDashboardResponse(rsp)
}

// GetDashboardWithResponse request returning *GetDashboardResponse
func (c *ClientWithResponses) GetDashboardWithResponse(ctx context.Context, dashboardId int, reqEditors ...RequestEditorFn) (*GetDashboardResponse, error) {
	rsp, err := c.GetDashboard(ctx, dashboardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardResponse(rsp)
}

// UpdateDashboardWithBodyWithResponse request with arbitrary body returning *UpdateDashboardResponse
func (c *ClientWithResponses) UpdateDashboardWithBodyWithResponse(ctx context.Context, dashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDashboardResponse, error) {
	rsp, err := c.UpdateDashboardWithBody(ctx, dashboardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDashboardResponse(rsp)
}

func (c *ClientWithResponses) UpdateDashboardWithResponse(ctx context.Context, dashboardId int, body UpdateDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDashboardResponse, error) {
	rsp, err := c.UpdateDashboard(ctx, dashboardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDashboardResponse(rsp)
}

// DeleteDashboardCardWithResponse request returning *DeleteDashboardCardResponse
func (c *ClientWithResponses) DeleteDashboardCardWithResponse(ctx context.Context, dashboardId int, params *DeleteDashboardCardParams, reqEditors ...RequestEditorFn) (*DeleteDashboardCardResponse, error) {
	rsp, err := c.DeleteDashboardCard(ctx, dashboardId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDashboardCardResponse(rsp)
}

// CreateDashboardCardWithBodyWithResponse request with arbitrary body returning *CreateDashboardCardResponse
func (c *ClientWithResponses) CreateDashboardCardWithBodyWithResponse(ctx context.Context, dashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDashboardCardResponse, error) {
	rsp, err := c.CreateDashboardCardWithBody(ctx, dashboardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDashboardCardResponse(rsp)
}

func (c *ClientWithResponses) CreateDashboardCardWithResponse(ctx context.Context, dashboardId int, body CreateDashboardCardJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDashboardCardResponse, error) {
	rsp, err := c.CreateDashboardCard(ctx, dashboardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDashboardCardResponse(rsp)
}

// UpdateDashboardCardsWithBodyWithResponse request with arbitrary body returning *UpdateDashboardCardsResponse
func (c *ClientWithResponses) UpdateDashboardCardsWithBodyWithResponse(ctx context.Context, dashboardId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDashboardCardsResponse, error) {
	rsp, err := c.UpdateDashboardCardsWithBody(ctx, dashboardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDashboardCardsResponse(rsp)
}

func (c *ClientWithResponses) UpdateDashboardCardsWithResponse(ctx context.Context, dashboardId int, body UpdateDashboardCardsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDashboardCardsResponse, error) {
	rsp, err := c.UpdateDashboardCards(ctx, dashboardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDashboardCardsResponse(rsp)
}

// ListDatabasesWithResponse request returning *ListDatabasesResponse
func (c *ClientWithResponses) ListDatabasesWithResponse(ctx context.Context, params *ListDatabasesParams, reqEditors ...RequestEditorFn) (*ListDatabasesResponse, error) {
	rsp, err := c.ListDatabases(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDatabasesResponse(rsp)
}

// CreateDatabaseWithBodyWithResponse request with arbitrary body returning *CreateDatabaseResponse
func (c *ClientWithResponses) CreateDatabaseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDatabaseResponse, error) {
	rsp, err := c.CreateDatabaseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDatabaseResponse(rsp)
}

func (c *ClientWithResponses) CreateDatabaseWithResponse(ctx context.Context, body CreateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDatabaseResponse, error) {
	rsp, err := c.CreateDatabase(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDatabaseResponse(rsp)
}

// DeleteDatabaseWithResponse request returning *DeleteDatabaseResponse
func (c *ClientWithResponses) DeleteDatabaseWithResponse(ctx context.Context, databaseId int, reqEditors ...RequestEditorFn) (*DeleteDatabaseResponse, error) {
	rsp, err := c.DeleteDatabase(ctx, databaseId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDatabaseResponse(rsp)
}

// GetDatabaseWithResponse request returning *GetDatabaseResponse
func (c *ClientWithResponses) GetDatabaseWithResponse(ctx context.Context, databaseId int, reqEditors ...RequestEditorFn) (*GetDatabaseResponse, error) {
	rsp, err := c.GetDatabase(ctx, databaseId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatabaseResponse(rsp)
}

// UpdateDatabaseWithBodyWithResponse request with arbitrary body returning *UpdateDatabaseResponse
func (c *ClientWithResponses) UpdateDatabaseWithBodyWithResponse(ctx context.Context, databaseId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDatabaseResponse, error) {
	rsp, err := c.UpdateDatabaseWithBody(ctx, databaseId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDatabaseResponse(rsp)
}

func (c *ClientWithResponses) UpdateDatabaseWithResponse(ctx context.Context, databaseId int, body UpdateDatabaseJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDatabaseResponse, error) {
	rsp, err := c.UpdateDatabase(ctx, databaseId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDatabaseResponse(rsp)
}

// GetFieldWithResponse request returning *GetFieldResponse
func (c *ClientWithResponses) GetFieldWithResponse(ctx context.Context, fieldId int, reqEditors ...RequestEditorFn) (*GetFieldResponse, error) {
	rsp, err := c.GetField(ctx, fieldId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFieldResponse(rsp)
}

// UpdateFieldWithBodyWithResponse request with arbitrary body returning *UpdateFieldResponse
func (c *ClientWithResponses) UpdateFieldWithBodyWithResponse(ctx context.Context, fieldId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFieldResponse, error) {
	rsp, err := c.UpdateFieldWithBody(ctx, fieldId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFieldResponse(rsp)
}

func (c *ClientWithResponses) UpdateFieldWithResponse(ctx context.Context, fieldId int, body UpdateFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFieldResponse, error) {
	rsp, err := c.UpdateField(ctx, fieldId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFieldResponse(rsp)
}

// GetPermissionsGraphWithResponse request returning *GetPermissionsGraphResponse
func (c *ClientWithResponses) GetPermissionsGraphWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPermissionsGraphResponse, error) {
	rsp, err := c.GetPermissionsGraph(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionsGraphResponse(rsp)
}

// ReplacePermissionsGraphWithBodyWithResponse request with arbitrary body returning *ReplacePermissionsGraphResponse
func (c *ClientWithResponses) ReplacePermissionsGraphWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplacePermissionsGraphResponse, error) {
	rsp, err := c.ReplacePermissionsGraphWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplacePermissionsGraphResponse(rsp)
}

func (c *ClientWithResponses) ReplacePermissionsGraphWithResponse(ctx context.Context, body ReplacePermissionsGraphJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplacePermissionsGraphResponse, error) {
	rsp, err := c.ReplacePermissionsGraph(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplacePermissionsGraphResponse(rsp)
}

// CreatePermissionsGroupWithBodyWithResponse request with arbitrary body returning *CreatePermissionsGroupResponse
func (c *ClientWithResponses) CreatePermissionsGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePermissionsGroupResponse, error) {
	rsp, err := c.CreatePermissionsGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePermissionsGroupResponse(rsp)
}

func (c *ClientWithResponses) CreatePermissionsGroupWithResponse(ctx context.Context, body CreatePermissionsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePermissionsGroupResponse, error) {
	rsp, err := c.CreatePermissionsGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePermissionsGroupResponse(rsp)
}

// DeletePermissionsGroupWithResponse request returning *DeletePermissionsGroupResponse
func (c *ClientWithResponses) DeletePermissionsGroupWithResponse(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*DeletePermissionsGroupResponse, error) {
	rsp, err := c.DeletePermissionsGroup(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePermissionsGroupResponse(rsp)
}

// GetPermissionsGroupWithResponse request returning *GetPermissionsGroupResponse
func (c *ClientWithResponses) GetPermissionsGroupWithResponse(ctx context.Context, groupId int, reqEditors ...RequestEditorFn) (*GetPermissionsGroupResponse, error) {
	rsp, err := c.GetPermissionsGroup(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionsGroupResponse(rsp)
}

// UpdatePermissionsGroupWithBodyWithResponse request with arbitrary body returning *UpdatePermissionsGroupResponse
func (c *ClientWithResponses) UpdatePermissionsGroupWithBodyWithResponse(ctx context.Context, groupId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePermissionsGroupResponse, error) {
	rsp, err := c.UpdatePermissionsGroupWithBody(ctx, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePermissionsGroupResponse(rsp)
}

func (c *ClientWithResponses) UpdatePermissionsGroupWithResponse(ctx context.Context, groupId int, body UpdatePermissionsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePermissionsGroupResponse, error) {
	rsp, err := c.UpdatePermissionsGroup(ctx, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePermissionsGroupResponse(rsp)
}

// CreateSessionWithBodyWithResponse request with arbitrary body returning *CreateSessionResponse
func (c *ClientWithResponses) CreateSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error) {
	rsp, err := c.CreateSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSessionResponse(rsp)
}

func (c *ClientWithResponses) CreateSessionWithResponse(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error) {
	rsp, err := c.CreateSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSessionResponse(rsp)
}

// ListTablesWithResponse request returning *ListTablesResponse
func (c *ClientWithResponses) ListTablesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListTablesResponse, error) {
	rsp, err := c.ListTables(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTablesResponse(rsp)
}

// UpdateTableWithBodyWithResponse request with arbitrary body returning *UpdateTableResponse
func (c *ClientWithResponses) UpdateTableWithBodyWithResponse(ctx context.Context, tableId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTableResponse, error) {
	rsp, err := c.UpdateTableWithBody(ctx, tableId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTableResponse(rsp)
}

func (c *ClientWithResponses) UpdateTableWithResponse(ctx context.Context, tableId int, body UpdateTableJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTableResponse, error) {
	rsp, err := c.UpdateTable(ctx, tableId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTableResponse(rsp)
}

// GetTableMetadataWithResponse request returning *GetTableMetadataResponse
func (c *ClientWithResponses) GetTableMetadataWithResponse(ctx context.Context, tableId int, params *GetTableMetadataParams, reqEditors ...RequestEditorFn) (*GetTableMetadataResponse, error) {
	rsp, err := c.GetTableMetadata(ctx, tableId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTableMetadataResponse(rsp)
}

// ParseCreateCardResponse parses an HTTP response from a CreateCardWithResponse call
func ParseCreateCardResponse(rsp *http.Response) (*CreateCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Card
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCardResponse parses an HTTP response from a GetCardWithResponse call
func ParseGetCardResponse(rsp *http.Response) (*GetCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Card
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCardResponse parses an HTTP response from a UpdateCardWithResponse call
func ParseUpdateCardResponse(rsp *http.Response) (*UpdateCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Card
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListCollectionsResponse parses an HTTP response from a ListCollectionsWithResponse call
func ParseListCollectionsResponse(rsp *http.Response) (*ListCollectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Collection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCollectionResponse parses an HTTP response from a CreateCollectionWithResponse call
func ParseCreateCollectionResponse(rsp *http.Response) (*CreateCollectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Collection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCollectionPermissionsGraphResponse parses an HTTP response from a GetCollectionPermissionsGraphWithResponse call
func ParseGetCollectionPermissionsGraphResponse(rsp *http.Response) (*GetCollectionPermissionsGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionPermissionsGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionPermissionsGraph
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplaceCollectionPermissionsGraphResponse parses an HTTP response from a ReplaceCollectionPermissionsGraphWithResponse call
func ParseReplaceCollectionPermissionsGraphResponse(rsp *http.Response) (*ReplaceCollectionPermissionsGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceCollectionPermissionsGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionPermissionsGraph
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCollectionResponse parses an HTTP response from a GetCollectionWithResponse call
func ParseGetCollectionResponse(rsp *http.Response) (*GetCollectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Collection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCollectionResponse parses an HTTP response from a UpdateCollectionWithResponse call
func ParseUpdateCollectionResponse(rsp *http.Response) (*UpdateCollectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Collection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListDashboardsResponse parses an HTTP response from a ListDashboardsWithResponse call
func ParseListDashboardsResponse(rsp *http.Response) (*ListDashboardsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDashboardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Dashboard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateDashboardResponse parses an HTTP response from a CreateDashboardWithResponse call
func ParseCreateDashboardResponse(rsp *http.Response) (*CreateDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dashboard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDashboardResponse parses an HTTP response from a DeleteDashboardWithResponse call
func ParseDeleteDashboardResponse(rsp *http.Response) (*DeleteDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDashboardResponse parses an HTTP response from a GetDashboardWithResponse call
func ParseGetDashboardResponse(rsp *http.Response) (*GetDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DashboardWithCards
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateDashboardResponse parses an HTTP response from a UpdateDashboardWithResponse call
func ParseUpdateDashboardResponse(rsp *http.Response) (*UpdateDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dashboard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDashboardCardResponse parses an HTTP response from a DeleteDashboardCardWithResponse call
func ParseDeleteDashboardCardResponse(rsp *http.Response) (*DeleteDashboardCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDashboardCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateDashboardCardResponse parses an HTTP response from a CreateDashboardCardWithResponse call
func ParseCreateDashboardCardResponse(rsp *http.Response) (*CreateDashboardCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDashboardCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DashboardCard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateDashboardCardsResponse parses an HTTP response from a UpdateDashboardCardsWithResponse call
func ParseUpdateDashboardCardsResponse(rsp *http.Response) (*UpdateDashboardCardsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDashboardCardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Status The return status of the operation.
			Status string `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListDatabasesResponse parses an HTTP response from a ListDatabasesWithResponse call
func ParseListDatabasesResponse(rsp *http.Response) (*ListDatabasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDatabasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateDatabaseResponse parses an HTTP response from a CreateDatabaseWithResponse call
func ParseCreateDatabaseResponse(rsp *http.Response) (*CreateDatabaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Database
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDatabaseResponse parses an HTTP response from a DeleteDatabaseWithResponse call
func ParseDeleteDatabaseResponse(rsp *http.Response) (*DeleteDatabaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDatabaseResponse parses an HTTP response from a GetDatabaseWithResponse call
func ParseGetDatabaseResponse(rsp *http.Response) (*GetDatabaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Database
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateDatabaseResponse parses an HTTP response from a UpdateDatabaseWithResponse call
func ParseUpdateDatabaseResponse(rsp *http.Response) (*UpdateDatabaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Database
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFieldResponse parses an HTTP response from a GetFieldWithResponse call
func ParseGetFieldResponse(rsp *http.Response) (*GetFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Field
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateFieldResponse parses an HTTP response from a UpdateFieldWithResponse call
func ParseUpdateFieldResponse(rsp *http.Response) (*UpdateFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Field
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPermissionsGraphResponse parses an HTTP response from a GetPermissionsGraphWithResponse call
func ParseGetPermissionsGraphResponse(rsp *http.Response) (*GetPermissionsGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionsGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionsGraph
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacePermissionsGraphResponse parses an HTTP response from a ReplacePermissionsGraphWithResponse call
func ParseReplacePermissionsGraphResponse(rsp *http.Response) (*ReplacePermissionsGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplacePermissionsGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionsGraph
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePermissionsGroupResponse parses an HTTP response from a CreatePermissionsGroupWithResponse call
func ParseCreatePermissionsGroupResponse(rsp *http.Response) (*CreatePermissionsGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePermissionsGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionsGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePermissionsGroupResponse parses an HTTP response from a DeletePermissionsGroupWithResponse call
func ParseDeletePermissionsGroupResponse(rsp *http.Response) (*DeletePermissionsGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePermissionsGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPermissionsGroupResponse parses an HTTP response from a GetPermissionsGroupWithResponse call
func ParseGetPermissionsGroupResponse(rsp *http.Response) (*GetPermissionsGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionsGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionsGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePermissionsGroupResponse parses an HTTP response from a UpdatePermissionsGroupWithResponse call
func ParseUpdatePermissionsGroupResponse(rsp *http.Response) (*UpdatePermissionsGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePermissionsGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionsGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSessionResponse parses an HTTP response from a CreateSessionWithResponse call
func ParseCreateSessionResponse(rsp *http.Response) (*CreateSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Session
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListTablesResponse parses an HTTP response from a ListTablesWithResponse call
func ParseListTablesResponse(rsp *http.Response) (*ListTablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Table
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateTableResponse parses an HTTP response from a UpdateTableWithResponse call
func ParseUpdateTableResponse(rsp *http.Response) (*UpdateTableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Table
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTableMetadataResponse parses an HTTP response from a GetTableMetadataWithResponse call
func ParseGetTableMetadataResponse(rsp *http.Response) (*GetTableMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTableMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TableMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
