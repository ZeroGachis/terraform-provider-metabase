openapi: 3.0.0

info:
  title: Metabase API
  version: 0.44.6
  description: API for Metabase.

security:
  - Session: []

paths:
  /card:
    post:
      operationId: createCard
      description: Creates a new card.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCardBody"
      responses:
        200:
          description: The card was successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"

  /card/{cardId}:
    get:
      operationId: getCard
      description: Retrieves a single card.
      parameters:
        - in: path
          name: cardId
          schema:
            type: integer
          required: true
          description: The ID of the card.
      responses:
        200:
          description: The card was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"

    put:
      operationId: updateCard
      description: Updates a single card.
      parameters:
        - in: path
          name: cardId
          schema:
            type: integer
          required: true
          description: The ID of the card.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCardBody"
      responses:
        200:
          description: The card was successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"

  /collection:
    post:
      operationId: createCollection
      description: Creates a new collection.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCollectionBody"
      responses:
        200:
          description: The collection was successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"

  /collection/graph:
    get:
      operationId: getCollectionPermissionsGraph
      description: Retrieves the collection permissions graph.
      responses:
        200:
          description: The collection permissions graph.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionPermissionsGraph"

    put:
      operationId: replaceCollectionPermissionsGraph
      description: Replaces the collection permissions graph.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollectionPermissionsGraph"
      responses:
        200:
          description: The updated collection permissions graph.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionPermissionsGraph"

  /collection/{collectionId}:
    get:
      operationId: getCollection
      description: Retrieves a single collection.
      parameters:
        - in: path
          name: collectionId
          schema:
            type: string
          required: true
          description: The ID of the collection.
      responses:
        200:
          description: The collection was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"

    put:
      operationId: updateCollection
      description: Updates a single collection.
      parameters:
        - in: path
          name: collectionId
          schema:
            type: string
          required: true
          description: The ID of the collection.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCollectionBody"
      responses:
        200:
          description: The collection was successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"

  /dashboard:
    post:
      operationId: createDashboard
      description: Creates a new dashboard.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDashboardBody"
      responses:
        200:
          description: The dashboard was successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboard"

    get:
      operationId: listDashboards
      description: Retrieves all dashboards.
      responses:
        200:
          description: The list of dashboards.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Dashboard"

  /dashboard/{dashboardId}:
    get:
      operationId: getDashboard
      description: Retrieves a single dashboard.
      parameters:
        - in: path
          name: dashboardId
          schema:
            type: integer
          required: true
          description: The ID of the dashboard.
      responses:
        200:
          description: The dashboard was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardWithCards"

    put:
      operationId: updateDashboard
      description: Updates a single dashboard.
      parameters:
        - in: path
          name: dashboardId
          schema:
            type: integer
          required: true
          description: The ID of the dashboard.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDashboardBody"
      responses:
        200:
          description: The dashboard was successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboard"

    delete:
      operationId: deleteDashboard
      description: Deletes a single dashboard.
      parameters:
        - in: path
          name: dashboardId
          schema:
            type: integer
          required: true
          description: The ID of the dashboard.
      responses:
        204:
          description: The dashboard was successfully deleted.

  /dashboard/{dashboardId}/cards:
    post:
      operationId: createDashboardCard
      description: Creates a new card within a dashboard.
      parameters:
        - in: path
          name: dashboardId
          schema:
            type: integer
          required: true
          description: The ID of the dashboard.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDashboardCardBody"
      responses:
        200:
          description: The dashboard card was successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardCard"

    put:
      operationId: updateDashboardCards
      description: Updates the list of cards in a dashboard.
      parameters:
        - in: path
          name: dashboardId
          schema:
            type: integer
          required: true
          description: The ID of the dashboard.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDashboardCardsBody"
      responses:
        200:
          description: The dashboard cards were successfully updated.
          content:
            application/json:
              schema:
                type: object
                description: A generic response object.
                properties:
                  status:
                    type: string
                    description: The return status of the operation.
                required:
                  - status

    delete:
      operationId: deleteDashboardCard
      description: Deletes a single card within a dashboard.
      parameters:
        - in: path
          name: dashboardId
          schema:
            type: integer
          required: true
          description: The ID of the dashboard.
        - in: query
          name: dashcardId
          schema:
            type: integer
          required: true
      responses:
        204:
          description: The dashboard was successfully deleted.

  /database:
    post:
      operationId: createDatabase
      description: Creates a new database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDatabaseBody"
      responses:
        200:
          description: The database was successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Database"

  /database/{databaseId}:
    get:
      operationId: getDatabase
      description: Retrieves a single database.
      parameters:
        - in: path
          name: databaseId
          schema:
            type: integer
          required: true
          description: The ID of the database.
      responses:
        200:
          description: The database was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Database"

    put:
      operationId: updateDatabase
      description: Updates a single database.
      parameters:
        - in: path
          name: databaseId
          schema:
            type: integer
          required: true
          description: The ID of the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDatabaseBody"
      responses:
        200:
          description: The database was successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Database"

    delete:
      operationId: deleteDatabase
      description: Deletes a single database.
      parameters:
        - in: path
          name: databaseId
          schema:
            type: integer
          required: true
          description: The ID of the database.
      responses:
        204:
          description: The database was successfully deleted.

  /permissions/graph:
    get:
      operationId: getPermissionsGraph
      description: Retrieves the permissions graph.
      responses:
        200:
          description: The permissions graph.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionsGraph"

    put:
      operationId: replacePermissionsGraph
      description: Replaces the permissions graph.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PermissionsGraph"
      responses:
        200:
          description: The updated permissions graph.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionsGraph"

  /permissions/group:
    post:
      operationId: createPermissionsGroup
      description: Creates a new permissions group.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePermissionsGroupBody"
      responses:
        200:
          description: The permissions group was successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionsGroup"

  /permissions/group/{groupId}:
    get:
      operationId: getPermissionsGroup
      description: Retrieves a single permissions group.
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The ID of the permissions group.
      responses:
        200:
          description: The permissions group was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionsGroup"

    put:
      operationId: updatePermissionsGroup
      description: Updates a single permissions group.
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The ID of the permissions group.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePermissionsGroupBody"
      responses:
        200:
          description: The permissions group was successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionsGroup"

    delete:
      operationId: deletePermissionsGroup
      description: Deletes a single permissions group.
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The ID of the permissions group.
      responses:
        204:
          description: The permissions group was successfully deleted.

  /session:
    post:
      operationId: createSession
      description: Logs in using a user name (or email address) and a password.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSessionBody"
      responses:
        200:
          description: The user authenticated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"

  /table:
    get:
      operationId: listTables
      description: Retrieves the list of all tables.
      responses:
        200:
          description: The list of tables.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Table"

  /table/{tableId}/query_metadata:
    get:
      operationId: getTableMetadata
      description: Gets the metadata for a single table.
      parameters:
        - in: path
          name: tableId
          schema:
            type: integer
          required: true
          description: The ID of the table.
        - in: query
          name: include_hidden_fields
          schema:
            type: boolean
          required: false
          description: Whether the query should return hidden fields.
      responses:
        200:
          description: The list of tables
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableMetadata"

components:
  securitySchemes:
    Session:
      type: apiKey
      in: header
      name: X-Metabase-Session

  schemas:
    # Cards.
    Card:
      type: object
      description: A card (or question).
      additionalProperties: true
      properties:
        id:
          type: integer
          description: The ID of the card.
        archived:
          type: boolean
          description: Whether the card has been archived.
      required:
        - id
        - archived
    CreateCardBody:
      type: object
      description: The payload when creating a new card.
      additionalProperties: true
    UpdateCardBody:
      type: object
      description: The payload when updating an existing card.
      additionalProperties: true
      properties:
        archived:
          type: boolean
          description: Set to `true` to archive the card.
    # Collections.
    Collection:
      type: object
      description: A collection that regroups dashboards and cards.
      additionalProperties: false
      properties:
        id:
          oneOf:
            - type: string
            - type: integer
          description: |-
            The unique ID for the collection.
            Created collections will have an integer ID. The automatically-created root collection's ID is `root`.
        name:
          type: string
          description: The name of the collection.
        color:
          type: string
          description: A color for the collection.
        description:
          type: string
          description: A description for the collection.
          nullable: true
        slug:
          type: string
          description: The slug for the collection, used in URLs.
        personal_owner_id:
          type: integer
          description: The ID of the user owning this collection, if it is a personal collection.
          nullable: true
        entity_id:
          type: string
          description: A unique string identifier for the collection.
        location:
          type: string
          description: A path-like location, useful when this is a sub-collection.
        parent_id:
          type: integer
          description: The ID of the parent collection, if any.
          nullable: true
        archived:
          type: boolean
          description: |-
            Whether the collection is archived.
            When archived, a collection no longer appears in the list publicly.
      required:
        - id
        - name
    CreateCollectionBody:
      type: object
      description: The payload used to create a new collection.
      additionalProperties: false
      properties:
        name:
          type: string
          description: The name of the collection.
        color:
          type: string
          description: A color for the collection.
        description:
          type: string
          description: A description for the collection.
          nullable: true
        parent_id:
          type: integer
          description: The ID of the parent collection, if any.
          nullable: true
      required:
        - name
        - color
    UpdateCollectionBody:
      type: object
      description: The payload used to update an existing collection.
      additionalProperties: false
      properties:
        name:
          type: string
          description: The name of the collection.
        color:
          type: string
          description: A color for the collection.
        archived:
          type: boolean
          description: |-
            Whether the collection is archived.
            When archived, a collection no longer appears in the list publicly.
        description:
          type: string
          description: A description for the collection.
          nullable: true
        parent_id:
          type: integer
          description: The ID of the parent collection, if any.
          nullable: true
    # Collection permissions graph.
    CollectionPermissionsGraph:
      type: object
      description: The entire permission graph for collections.
      properties:
        revision:
          type: integer
          description: The revision of the permissions graph.
        groups:
          type: object
          description: A map where keys are group IDs and values are permissions for this group.
          additionalProperties:
            $ref: "#/components/schemas/CollectionPermissionsGraphCollectionPermissionsMap"
      required:
        - revision
        - groups
    CollectionPermissionsGraphCollectionPermissionsMap:
      type: object
      description: A map where keys are collection IDs and values are permission levels.
      additionalProperties:
        $ref: "#/components/schemas/CollectionPermissionLevel"
    CollectionPermissionLevel:
      type: string
      description: The level of permission allowed when accessing the collection.
      enum:
        - none
        - read
        - write
    # Dashboards.
    Dashboard:
      type: object
      description: A dashboard containing cards.
      additionalProperties: false
      properties:
        id:
          type: integer
          description: The ID of the dashboard.
        name:
          type: string
          description: The name of the dashboard.
        description:
          type: string
          description: A description for the dashboard.
          nullable: true
        collection_position:
          type: integer
          description: The position of the dashboard in the collection.
          nullable: true
        collection_id:
          type: integer
          description: The ID of the collection in which the dashboard is placed.
          nullable: true
        cache_ttl:
          type: integer
          description: The cache TTL.
          nullable: true
        archived:
          type: boolean
          description: Whether the dashboard has been archived.
        parameters:
          type: array
          description: A list of parameters for the dashboard, that the user can tweak.
          items:
            $ref: "#/components/schemas/DashboardParameter"
      required:
        - id
        - name
        - description
        - collection_position
        - collection_id
        - cache_ttl
        - archived
        - parameters
    DashboardWithCards:
      description: A dashboard enriched with the list of cards within it.
      allOf:
        - $ref: "#/components/schemas/Dashboard"
        - type: object
          properties:
            ordered_cards:
              type: array
              description: The list of cards in the dashboard.
              items:
                $ref: "#/components/schemas/DashboardCard"
          required:
            - ordered_cards
    CreateDashboardBody:
      type: object
      description: The body of the payload when creating a dashboard.
      additionalProperties: false
      properties:
        name:
          type: string
          description: The name of the dashboard.
        description:
          type: string
          description: A description for the dashboard.
          nullable: true
        collection_position:
          type: integer
          description: The position of the dashboard in the collection.
          nullable: true
        collection_id:
          type: integer
          description: The ID of the collection in which the dashboard is placed.
          nullable: true
        cache_ttl:
          type: integer
          description: The cache TTL.
          nullable: true
        parameters:
          type: array
          description: A list of parameters for the dashboard, that the user can tweak.
          nullable: true
          items:
            $ref: "#/components/schemas/DashboardParameter"
      required:
        - name
    UpdateDashboardBody:
      type: object
      description: The body of the payload when updating a dashboard.
      additionalProperties: false
      properties:
        name:
          type: string
          description: The name of the dashboard.
        description:
          type: string
          description: A description for the dashboard.
          nullable: true
        collection_position:
          type: integer
          description: The position of the dashboard in the collection.
          nullable: true
        collection_id:
          type: integer
          description: The ID of the collection in which the dashboard is placed.
          nullable: true
        cache_ttl:
          type: integer
          description: The cache TTL.
          nullable: true
        archived:
          type: boolean
          description: Set to `true` to archive the dashboard.
        parameters:
          type: array
          description: A list of parameters for the dashboard, that the user can tweak.
          items:
            $ref: "#/components/schemas/DashboardParameter"
    DashboardParameter:
      type: object
      description: A parameter for a dashboard, that the user can tweak.
      properties:
        id:
          type: string
          description: The ID of the parameter.
        name:
          type: string
          description: The displayed name for the parameter.
        slug:
          type: string
          description: The slug name for the parameter.
        type:
          type: string
          description: The type of parameter.
        sectionId:
          type: string
          description: The ID of the section.
        default:
          oneOf:
            - type: string
            - type: array
          description: The default value for the parameter.
      required:
        - id
        - name
        - slug
        - type
        - sectionId
    DashboardCard:
      type: object
      description: A card within a dashboard.
      properties:
        id:
          type: integer
          description: The ID of the dashboard card.
        card_id:
          type: integer
          description: The ID of the card.
          nullable: true
        row:
          type: integer
          description: The index of the row at which the card is placed.
        col:
          type: integer
          description: The index of the column at which the card is placed.
        sizeX:
          type: integer
          description: The horizontal size of the card in the dashboard.
        sizeY:
          type: integer
          description: The vertical size of the card in the dashboard.
        series:
          type: array
          description: A list of series.
        parameter_mappings:
          type: array
          description: A list of parameter mappings.
        visualization_settings:
          type: object
          description: The visualization settings for the card.
          additionalProperties: true
      required:
        - card_id
        - col
        - id
        - parameter_mappings
        - row
        - series
        - sizeX
        - sizeY
        - visualization_settings
    CreateDashboardCardBody:
      type: object
      description: The payload when creating a new card within a dashboard.
      properties:
        cardId:
          type: integer
          description: The ID of the card to add to the dashboard.
          nullable: true
        parameter_mappings:
          type: array
          description: A list of parameter mappings for the card.
      required:
        - cardId
    UpdateDashboardCardsBody:
      type: object
      description: The payload when updating all cards in a dashboard.
      properties:
        cards:
          type: array
          description: The list of cards in the dashboard.
          items:
            $ref: "#/components/schemas/DashboardCard"
      required:
        - cards
    # Databases.
    Database:
      type: object
      description: An external database that can be queried by cards and dashboards.
      properties:
        id:
          type: integer
          description: The ID for the database.
        name:
          type: string
          description: The user-displayable name for the database.
        engine:
          $ref: "#/components/schemas/DatabaseEngine"
        details:
          $ref: "#/components/schemas/DatabaseDetailsBigQuery"
      required:
        - id
        - name
        - engine
        - details
    DatabaseDetailsBigQuery:
      type: object
      description: The content of the `details` map for a database when connecting to BigQuery.
      properties:
        service-account-json:
          type: string
          description: The content of the service account key file.
        project-id:
          type: string
          description: The ID of the GCP project containing the BigQuery datasets.
        dataset-filters-type:
          type: string
          description: The behavior of how BigQuery datasets should be selected.
          enum:
            - inclusion
            - exclusion
            - all
        dataset-filters-patterns:
          type: string
          description: The pattern used by the `dataset-filters-type`.
      required:
        - service-account-json
    CreateDatabaseBody:
      type: object
      description: The payload used to create a new database.
      properties:
        name:
          type: string
          description: The user-displayable name for the database.
        engine:
          $ref: "#/components/schemas/DatabaseEngine"
        details:
          $ref: "#/components/schemas/DatabaseDetailsBigQuery"
      required:
        - name
        - engine
        - details
    UpdateDatabaseBody:
      type: object
      description: The payload used to update an existing database.
      properties:
        name:
          type: string
          description: The user-displayable name for the database.
        engine:
          $ref: "#/components/schemas/DatabaseEngine"
        details:
          $ref: "#/components/schemas/DatabaseDetailsBigQuery"
    DatabaseEngine:
      type: string
      description: The type of database to connect to.
      enum:
        - bigquery-cloud-sdk
    # Fields.
    Field:
      type: object
      description: A field in a database.
      additionalProperties: false
      properties:
        id:
          type: integer
          description: The ID of the field.
        name:
          type: string
          description: The name of the field (column) in the table.
      required:
        - id
        - name
    # Permissions group.
    PermissionsGroup:
      type: object
      description: A group of users to which permissions can be granted.
      properties:
        id:
          type: integer
          description: The ID of the permissions group.
        name:
          type: string
          description: A user-displayable name for the group.
      required:
        - id
        - name
    CreatePermissionsGroupBody:
      type: object
      description: The payload used to create a new permissions group.
      properties:
        name:
          type: string
          description: A user-displayable name for the group.
      required:
        - name
    UpdatePermissionsGroupBody:
      type: object
      description: The payload used to update an existing permissions group.
      properties:
        name:
          type: string
          description: A user-displayable name for the group.
      required:
        - name
    # Group's permissions on databases.
    PermissionsGraph:
      type: object
      description: The entire permission graph for databases.
      properties:
        revision:
          type: integer
          description: The revision of the permissions graph.
        groups:
          type: object
          description: A map where keys are group IDs and values are permissions for this group.
          additionalProperties:
            $ref: "#/components/schemas/PermissionsGraphDatabasePermissionsMap"
      required:
        - revision
        - groups
    PermissionsGraphDatabasePermissionsMap:
      type: object
      description: A map where keys are database IDs and values are permissions related to the database.
      additionalProperties:
        $ref: "#/components/schemas/PermissionsGraphDatabasePermissions"
    PermissionsGraphDatabasePermissions:
      type: object
      description: The permissions related to a single database.
      properties:
        data:
          $ref: "#/components/schemas/PermissionsGraphDatabaseAccess"
        download:
          $ref: "#/components/schemas/PermissionsGraphDatabaseAccess"
        data-model:
          $ref: "#/components/schemas/PermissionsGraphDatabaseAccess"
        details:
          type: string
          description: The permission definition for accessing details.
          enum:
            - "yes"
            - "no"
    PermissionsGraphDatabaseAccess:
      type: object
      description: The permissions for a single access type.
      properties:
        native:
          type: string
          description: Whether "Native query editing" is allowed.
          enum:
            - full
            - write
            - none
        schemas:
          type: string
          description: Whether "Data access" is allowed.
          enum:
            - full
            - all
            - none
    # Sessions.
    Session:
      type: object
      description: A session that can be used to perform authenticated requests to the API.
      additionalProperties: false
      properties:
        id:
          type: string
      required:
        - id
    CreateSessionBody:
      type: object
      description: The credentials required to create a session.
      additionalProperties: false
      properties:
        username:
          type: string
          description: The name of the user, or his email.
        password:
          type: string
          description: The password for the account.
      required:
        - username
        - password
    # Tables.
    Table:
      type: object
      description: A table in a database.
      additionalProperties: false
      properties:
        id:
          type: integer
          description: The ID of the table.
        db_id:
          type: integer
          description: The ID of the parent database.
        name:
          type: string
          description: The name of the table.
        display_name:
          type: string
          description: The name displayed in the interface for the table.
        entity_type:
          type: string
          description: The type of table.
        schema:
          type: string
          description: |-
            The database schema in which the table is located.
            For BigQuery, this is the dataset name.
          nullable: true
      required:
        - id
        - db_id
        - name
        - entity_type
    TableMetadata:
      description: A table in a database, along with additional metadata, like the fields it contains.
      allOf:
        - $ref: "#/components/schemas/Table"
        - type: object
          additionalProperties: false
          properties:
            fields:
              type: array
              description: The list of fields in the table.
              items:
                $ref: "#/components/schemas/Field"
          required:
            - fields
